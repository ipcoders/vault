---
- name: Update Vault Secrets
  hosts: localhost
  gather_facts: no
  vars:
    engine_type: kv
    #engine_type: ssh
    #engine_type: pki
    engine_name: app-a
    secret_name: secrets-app-1
    data_file: "data.yml" 
  
  pre_tasks:
    - name: Ensure environment variables are set
      block:
        - name: Error message
          fail:
            msg: "One or many environment variables are missing, VAULT_TOKEN, VAULT_ADDR and VAULT_SKIP_VERIFY are required."
          when: >
            lookup('env', 'VAULT_TOKEN') == "" or
            lookup('env', 'VAULT_ADDR') == "" or
            lookup('env', 'VAULT_SKIP_VERIFY') == ""

        - name: Check if "{{ data_file }}" exists
          set_fact:
            user_data: "{{ lookup('file', 'files/' + data_file) | from_yaml }}"
          ignore_errors: true

        - name: Error message
          when: user_data is not defined or user_data|length == 0 
          block:
            - name: Error message
              debug:
                msg: "The {{ data_file }} file is either missing or empty."

            - meta: end_play

    - name: Set Vars
      set_fact:
        vault_addr: "{{ lookup('env', 'VAULT_ADDR') }}"
        vault_token: "{{ lookup('env', 'VAULT_TOKEN') }}"


  tasks:
    - name: Create Secret
      when: engine_type in ["kv"]
      block:
        - name: Set var
          set_fact:
            secret_path: "{{ engine_name }}/data/{{ secret_name }}"

        - name: Read a kv2 secret
          ansible.builtin.set_fact:
            secret_data: "{{ lookup('community.hashi_vault.vault_read', secret_path, url=vault_addr) }}"
          register: result

        - name: Check result
          fail:
            msg: "ERROR: Secret was either not found or unknown error occurred."
          when: result['failed'] 

        - name: Combine new and existing data
          ansible.builtin.set_fact:
            data_combined: "{{ secret_data['data']['data'] | combine(user_data) }}"

        - name: Set new body
          ansible.builtin.set_fact:
            body:
              data: "{{ data_combined }}"

        - name: Write Secret
          when: body is defined
          uri:
            url: "{{ vault_addr }}/v1/{{ secret_path }}"
            method: POST
            headers:
              X-Vault-Token: "{{ vault_token }}"
            body: "{{ body }}"
            status_code: [200, 201, 204]
            body_format: json
            return_content: true
            validate_certs: false
          register: result

        - name: Show result
          debug:
            msg: "{{ result }}"

